import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import '../widgets/rabbit_emoticon.dart';
import '../providers/emotion_provider.dart';
import 'package:provider/provider.dart';
import '../models/emotion_record.dart';

class ReflectionScreen extends StatefulWidget {
  const ReflectionScreen({Key? key}) : super(key: key);

  @override
  State<ReflectionScreen> createState() => _ReflectionScreenState();
}

class _ReflectionScreenState extends State<ReflectionScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),
    );
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 0.3),
      end: Offset.zero,
    ).animate(CurvedAnimation(
        parent: _animationController, curve: Curves.easeOutCubic));

    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  Widget _buildCustomAppBar(String monthName) {
    return Padding(
      padding: const EdgeInsets.only(top: 16, left: 20, right: 20, bottom: 8),
      child: Row(
        children: [
          Container(
            width: 40,
            height: 40,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(12),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.08),
                  blurRadius: 8,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: IconButton(
              icon: const Icon(Icons.arrow_back_ios_new, size: 18),
              onPressed: () => Navigator.pop(context),
              color: const Color(0xFF6B73FF),
            ),
          ),
          const Spacer(),
          Text(
            '$monthName ÌöåÍ≥†',
            style: GoogleFonts.jua(
              fontSize: 22,
              fontWeight: FontWeight.w600,
              color: const Color(0xFF4C4C4C),
            ),
          ),
          const Spacer(),
          Container(
            width: 40,
            height: 40,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(12),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.08),
                  blurRadius: 8,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: IconButton(
              icon: const Icon(Icons.more_vert, size: 18),
              onPressed: () {},
              color: const Color(0xFF6B73FF),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMonthlyHeader(String monthName) {
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Color(0xFF667EEA),
            Color(0xFF764BA2),
          ],
        ),
        borderRadius: BorderRadius.circular(24),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFF667EEA).withOpacity(0.3),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                width: 56,
                height: 56,
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(18),
                ),
                child: const Center(
                  child: Text('üìù', style: TextStyle(fontSize: 28)),
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '$monthName Í∞êÏ†ï Ïó¨Ìñâ',
                      style: GoogleFonts.jua(
                        fontSize: 20,
                        fontWeight: FontWeight.w600,
                        color: Colors.white,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      'AIÍ∞Ä ÎãπÏã†Ïùò Í∞êÏ†ï Ìå®ÌÑ¥ÏùÑ Î∂ÑÏÑùÌñàÏñ¥Ïöî',
                      style: GoogleFonts.jua(
                        fontSize: 14,
                        color: Colors.white.withOpacity(0.9),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(
                color: Colors.white.withOpacity(0.2),
                width: 1,
              ),
            ),
            child: Text(
              '‚ú® Îß§Ïõî ÌöåÍ≥†Î•º ÌÜµÌï¥ Í∞êÏ†ïÏ†Å ÏÑ±Ïû•ÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî',
              style: GoogleFonts.jua(
                fontSize: 13,
                color: Colors.white.withOpacity(0.9),
              ),
              textAlign: TextAlign.center,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAIReflectionCard(String aiComment) {
    return TweenAnimationBuilder(
      duration: const Duration(milliseconds: 800),
      tween: Tween<double>(begin: 0.0, end: 1.0),
      builder: (context, value, child) {
        return Transform.scale(
          scale: 0.8 + (0.2 * value),
          child: Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              gradient: const LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Color(0xFF4ECDC4),
                  Color(0xFF44A08D),
                ],
              ),
              borderRadius: BorderRadius.circular(24),
              boxShadow: [
                BoxShadow(
                  color: const Color(0xFF4ECDC4).withOpacity(0.3),
                  blurRadius: 20,
                  offset: const Offset(0, 8),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Container(
                      width: 48,
                      height: 48,
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(16),
                      ),
                      child: const Center(
                        child: Text('ü§ñ', style: TextStyle(fontSize: 24)),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Text(
                      'AI Í∞êÏ†ï Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏',
                      style: GoogleFonts.jua(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: Colors.white,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 20),
                Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.15),
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: Colors.white.withOpacity(0.2),
                      width: 1,
                    ),
                  ),
                  child: Text(
                    aiComment,
                    style: GoogleFonts.jua(
                      fontSize: 15,
                      color: Colors.white,
                      height: 1.6,
                    ),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  RabbitEmotion _mapLabelToRabbitEmotion(String label) {
    switch (label) {
      case 'ÌñâÎ≥µ':
        return RabbitEmotion.happy;
      case 'Ïä¨Ìîî':
        return RabbitEmotion.sad;
      case 'ÌôîÎÇ®':
        return RabbitEmotion.angry;
      case 'Ìù•Î∂Ñ':
        return RabbitEmotion.excited;
      case 'ÌèâÏò®':
        return RabbitEmotion.calm;
      case 'Î∂àÏïà':
        return RabbitEmotion.anxious;
      case 'ÏÇ¨Îûë':
        return RabbitEmotion.love;
      case 'ÌîºÍ≥§':
        return RabbitEmotion.tired;
      case 'Ï†àÎßù':
        return RabbitEmotion.despair;
      default:
        return RabbitEmotion.happy;
    }
  }

  RabbitEmotion _mapStringToRabbitEmotion(String key) {
    switch (key) {
      case 'happy':
      case 'ÌñâÎ≥µ':
      case 'üòä':
        return RabbitEmotion.happy;
      case 'sad':
      case 'Ïä¨Ìîî':
      case 'üò¢':
        return RabbitEmotion.sad;
      case 'angry':
      case 'Î∂ÑÎÖ∏':
      case 'üò§':
        return RabbitEmotion.angry;
      case 'excited':
      case 'Ìù•Î∂Ñ':
      case 'ü§©':
        return RabbitEmotion.excited;
      case 'calm':
      case 'ÌèâÏò®':
      case 'üòå':
        return RabbitEmotion.calm;
      case 'anxious':
      case 'Î∂àÏïà':
      case 'üò∞':
        return RabbitEmotion.anxious;
      case 'love':
      case 'ÏÇ¨Îûë':
      case 'ü•∞':
        return RabbitEmotion.love;
      case 'tired':
      case 'ÌîºÍ≥§':
      case 'üò¥':
        return RabbitEmotion.tired;
      case 'despair':
      case 'Ï†àÎßù':
      case 'üò≠':
        return RabbitEmotion.despair;
      default:
        return RabbitEmotion.happy;
    }
  }

  Widget _buildEmotionSummaryCard(Map<String, int> emotionCounts, int total) {
    final emotionStats = [
      {'emoji': 'üòä', 'label': 'ÌñâÎ≥µ', 'key': 'happy', 'color': const Color(0xFFFFB74D)},
      {'emoji': 'üò¢', 'label': 'Ïä¨Ìîî', 'key': 'sad', 'color': const Color(0xFF64B5F6)},
      {'emoji': 'üò§', 'label': 'Î∂ÑÎÖ∏', 'key': 'angry', 'color': const Color(0xFFE57373)},
      {'emoji': 'üò∞', 'label': 'Î∂àÏïà', 'key': 'anxious', 'color': const Color(0xFF9575CD)},
      {'emoji': 'üò¥', 'label': 'ÌîºÍ≥§', 'key': 'tired', 'color': const Color(0xFF81C784)},
      {'emoji': 'ü•∞', 'label': 'ÏÇ¨Îûë', 'key': 'love', 'color': const Color(0xFFFF8FA3)},
    ];
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Color(0xFFFF9A9E),
            Color(0xFFFECFEF),
          ],
        ),
        borderRadius: BorderRadius.circular(24),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFFFF9A9E).withOpacity(0.3),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                width: 48,
                height: 48,
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(16),
                ),
                child: const Center(
                  child: Text('üìä', style: TextStyle(fontSize: 24)),
                ),
              ),
              const SizedBox(width: 12),
              Text(
                'Í∞êÏ†ï Î∂ÑÌè¨ ÌòÑÌô©',
                style: GoogleFonts.jua(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: Colors.white,
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.15),
              borderRadius: BorderRadius.circular(16),
              border: Border.all(
                color: Colors.white.withOpacity(0.2),
                width: 1,
              ),
            ),
            child: Column(
              children: emotionStats.map((stat) {
                final count = emotionCounts[stat['key']] ?? 0;
                final percent = total > 0 ? (count / total * 100).toInt() : 0;
                return Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8),
                  child: Row(
                    children: [
                      Container(
                        width: 40,
                        height: 40,
                        decoration: BoxDecoration(
                          color: ((stat['color'] as Color?) ?? Colors.grey).withOpacity(0.2),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Center(
                          child: Text(stat['emoji'] as String, style: const TextStyle(fontSize: 20)),
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Text(
                          stat['label'] as String,
                          style: GoogleFonts.jua(
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                            color: Colors.white,
                          ),
                        ),
                      ),
                      const SizedBox(width: 12),
                      Text(
                        '$percent%',
                        style: GoogleFonts.jua(
                          fontSize: 14,
                          fontWeight: FontWeight.w600,
                          color: stat['color'] as Color,
                        ),
                      ),
                    ],
                  ),
                );
              }).toList(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRecentEmotionChart(List recent7) {
    final days = ['Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†', 'Ïùº'];
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'ÏµúÍ∑º 7Ïùº Í∞êÏ†ï Î≥ÄÌôî',
          style: GoogleFonts.jua(
            fontSize: 16,
            fontWeight: FontWeight.w600,
            color: const Color(0xFF2D3748),
          ),
        ),
        const SizedBox(height: 12),
        Container(
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(16),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.04),
                blurRadius: 8,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: Padding(
            padding: const EdgeInsets.all(20),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: List.generate(7, (index) {
                final record = recent7[index];
                return Column(
                  children: [
                    Container(
                      width: 36,
                      height: 36,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: const Color(0xFF6B73FF).withOpacity(0.1),
                      ),
                      child: Center(
                        child: record != null
                            ? RabbitEmoticon(
                                emotion: _mapStringToRabbitEmotion(record.emotion),
                                size: 30,
                              )
                            : const Text('-', style: TextStyle(fontSize: 18, color: Colors.grey)),
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      days[index],
                      style: GoogleFonts.jua(
                        fontSize: 12,
                        fontWeight: FontWeight.w500,
                        color: const Color(0xFF4A5568),
                      ),
                    ),
                  ],
                );
              }),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildGrowthInsights() {
    final insights = [
      {
        'icon': 'üìà',
        'title': 'Í∞êÏ†ï Ïù∏Ïãù Îä•Î†• Ìñ•ÏÉÅ',
        'description': 'Ïù¥Ï†Ñ Îã¨Î≥¥Îã§ Îçî Îã§ÏñëÌïú Í∞êÏ†ïÏùÑ Ïù∏ÏãùÌïòÍ≥† ÌëúÌòÑÌïòÍ≥† ÏûàÏñ¥Ïöî',
        'progress': 0.8,
      },
      {
        'icon': 'üéØ',
        'title': 'Í∞êÏ†ï Ï°∞Ï†à Ïó∞Ïäµ',
        'description': 'Î∂ÄÏ†ïÏ†ÅÏù∏ Í∞êÏ†ïÏùÑ Í±¥Í∞ïÌïòÍ≤å Ï≤òÎ¶¨ÌïòÎäî Î∞©Î≤ïÏùÑ ÌÑ∞ÎìùÌñàÏñ¥Ïöî',
        'progress': 0.65,
      },
      {
        'icon': 'üå±',
        'title': 'ÏûêÍ∏∞ Ïù¥Ìï¥ Ï¶ùÏßÑ',
        'description': 'Í∞êÏ†ï Ìå®ÌÑ¥ÏùÑ ÌååÏïÖÌïòÎ©∞ ÏûêÏã†ÏùÑ Îçî Ïûò ÏïåÏïÑÍ∞ÄÍ≥† ÏûàÏñ¥Ïöî',
        'progress': 0.9,
      },
    ];

    return Container(
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Color(0xFF6366F1),
            Color(0xFF8B5CF6),
          ],
        ),
        borderRadius: BorderRadius.circular(24),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFF6366F1).withOpacity(0.3),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                width: 48,
                height: 48,
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(16),
                ),
                child: const Center(
                  child: Text('üöÄ', style: TextStyle(fontSize: 24)),
                ),
              ),
              const SizedBox(width: 12),
              Text(
                'ÏÑ±Ïû• Ïù∏ÏÇ¨Ïù¥Ìä∏',
                style: GoogleFonts.jua(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: Colors.white,
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          ...insights.map((insight) =>
              TweenAnimationBuilder(
                duration: Duration(milliseconds: 800 +
                    (insight['icon'] as String).hashCode % 400),
                tween: Tween<double>(begin: 0.0, end: 1.0),
                builder: (context, value, child) {
                  return Container(
                    margin: const EdgeInsets.only(bottom: 16),
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.15),
                      borderRadius: BorderRadius.circular(16),
                      border: Border.all(
                        color: Colors.white.withOpacity(0.2),
                        width: 1,
                      ),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Text(
                              insight['icon'] as String,
                              style: const TextStyle(fontSize: 20),
                            ),
                            const SizedBox(width: 8),
                            Text(
                              insight['title'] as String,
                              style: GoogleFonts.jua(
                                fontSize: 14,
                                fontWeight: FontWeight.w600,
                                color: Colors.white,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Text(
                          insight['description'] as String,
                          style: GoogleFonts.jua(
                            fontSize: 12,
                            color: Colors.white.withOpacity(0.9),
                            height: 1.4,
                          ),
                        ),
                        const SizedBox(height: 12),
                        Container(
                          height: 6,
                          width: double.infinity,
                          decoration: BoxDecoration(
                            color: Colors.white.withOpacity(0.2),
                            borderRadius: BorderRadius.circular(3),
                          ),
                          child: FractionallySizedBox(
                            alignment: Alignment.centerLeft,
                            widthFactor: value *
                                (insight['progress'] as double),
                            child: Container(
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: BorderRadius.circular(3),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  );
                },
              )
          ).toList(),
        ],
      ),
    );
  }

  Widget _buildPersonalizedTips() {
    final tips = [
      'üòå Ïä§Ìä∏Î†àÏä§Î•º Î∞õÏùÑ ÎïåÎäî Ïã¨Ìò∏Ìù°ÏùÑ 3Î≤à Ìï¥Î≥¥ÏÑ∏Ïöî',
      'üåÖ ÏïÑÏπ®Ïóê ÏùºÏñ¥ÎÇòÏÑú Í∞êÏÇ¨Ìïú Í≤É 3Í∞ÄÏßÄÎ•º Îñ†Ïò¨Î†§Î≥¥ÏÑ∏Ïöî',
      'üìö ÌïòÎ£® 10Î∂Ñ ÏùºÍ∏∞ Ïì∞Í∏∞Î°ú Í∞êÏ†ïÏùÑ Ï†ïÎ¶¨Ìï¥Î≥¥ÏÑ∏Ïöî',
      'üö∂‚Äç‚ôÄÔ∏è ÏÇ∞Ï±ÖÌïòÎ©∞ ÏûêÏó∞Í≥º Ìï®Íªò ÎßàÏùåÏùÑ Ìé∏ÏïàÌïòÍ≤å Ìï¥Î≥¥ÏÑ∏Ïöî',
      'üéµ Ï¢ãÏïÑÌïòÎäî ÏùåÏïÖÏùÑ Îì§ÏúºÎ©∞ Í∞êÏ†ïÏùÑ ÌëúÌòÑÌï¥Î≥¥ÏÑ∏Ïöî',
    ];

    return Container(
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Color(0xFFFF6B6B),
            Color(0xFFFFE66D),
          ],
        ),
        borderRadius: BorderRadius.circular(24),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFFFF6B6B).withOpacity(0.3),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                width: 48,
                height: 48,
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(16),
                ),
                child: const Center(
                  child: Text('üí°', style: TextStyle(fontSize: 24)),
                ),
              ),
              const SizedBox(width: 12),
              Text(
                'ÎßûÏ∂§Ìòï Í∞êÏ†ï ÏºÄÏñ¥ ÌåÅ',
                style: GoogleFonts.jua(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: Colors.white,
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.15),
              borderRadius: BorderRadius.circular(16),
              border: Border.all(
                color: Colors.white.withOpacity(0.2),
                width: 1,
              ),
            ),
            child: Column(
              children: tips.take(3).map((tip) =>
                  TweenAnimationBuilder(
                    duration: Duration(milliseconds: 600 + tip.hashCode % 400),
                    tween: Tween<double>(begin: 0.0, end: 1.0),
                    builder: (context, value, child) {
                      return Transform.translate(
                        offset: Offset(0, (1 - value) * 20),
                        child: Container(
                          margin: const EdgeInsets.only(bottom: 12),
                          padding: const EdgeInsets.all(12),
                          decoration: BoxDecoration(
                            color: Colors.white.withOpacity(0.1),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text(
                            tip,
                            style: GoogleFonts.jua(
                              fontSize: 13,
                              color: Colors.white,
                              height: 1.4,
                            ),
                          ),
                        ),
                      );
                    },
                  )
              ).toList(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNextMonthGoals() {
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Color(0xFF667EEA),
            Color(0xFF764BA2),
          ],
        ),
        borderRadius: BorderRadius.circular(24),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFF667EEA).withOpacity(0.3),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                width: 48,
                height: 48,
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(16),
                ),
                child: const Center(
                  child: Text('üéØ', style: TextStyle(fontSize: 24)),
                ),
              ),
              const SizedBox(width: 12),
              Text(
                'Îã§Ïùå Îã¨ Î™©Ìëú',
                style: GoogleFonts.jua(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: Colors.white,
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.15),
              borderRadius: BorderRadius.circular(16),
              border: Border.all(
                color: Colors.white.withOpacity(0.2),
                width: 1,
              ),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'üåü Í∞êÏ†ï Í∏∞Î°ù ÏäµÍ¥ÄÌôîÌïòÍ∏∞',
                  style: GoogleFonts.jua(
                    fontSize: 15,
                    fontWeight: FontWeight.w600,
                    color: Colors.white,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  'Îß§Ïùº Íæ∏Ï§ÄÌûà Í∞êÏ†ïÏùÑ Í∏∞Î°ùÌïòÏó¨ ÏûêÏã†ÏùÑ Îçî Ïûò Ïù¥Ìï¥Ìï¥Î≥¥ÏÑ∏Ïöî. ÏûëÏùÄ Î≥ÄÌôîÎèÑ ÏÜåÏ§ëÌïú ÏÑ±Ïû•ÏûÖÎãàÎã§.',
                  style: GoogleFonts.jua(
                    fontSize: 13,
                    color: Colors.white.withOpacity(0.9),
                    height: 1.5,
                  ),
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    Expanded(
                      child: Container(
                        height: 40,
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Center(
                          child: Text(
                            'Î™©Ìëú ÏÑ§Ï†ïÌïòÍ∏∞',
                            style: GoogleFonts.jua(
                              fontSize: 13,
                              fontWeight: FontWeight.w600,
                              color: Colors.white,
                            ),
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Container(
                      width: 40,
                      height: 40,
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: const Center(
                        child: Text('üí™', style: TextStyle(fontSize: 20)),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final records = Provider.of<EmotionProvider>(context).records;
    final month = DateTime.now().month;
    final monthNames = ['', '1Ïõî', '2Ïõî', '3Ïõî', '4Ïõî', '5Ïõî', '6Ïõî',
      '7Ïõî', '8Ïõî', '9Ïõî', '10Ïõî', '11Ïõî', '12Ïõî'];
    // Ïù¥Î≤à Îã¨ Í∏∞Î°ùÎßå Ï∂îÏ∂ú
    final now = DateTime.now();
    final monthRecords = records.where((r) => r.date.year == now.year && r.date.month == now.month).toList();
    // Í∞êÏ†ïÎ≥Ñ Ïπ¥Ïö¥Ìä∏
    final Map<String, int> emotionCounts = {};
    for (final r in monthRecords) {
      emotionCounts[r.emotion] = (emotionCounts[r.emotion] ?? 0) + 1;
    }
    // ÏµúÍ∑º 7Ïùº Í∞êÏ†ï Î≥ÄÌôî
    final recent7 = List.generate(7, (i) {
      final day = now.subtract(Duration(days: 6 - i));
      return records.firstWhere(
        (r) => r.date.year == day.year && r.date.month == day.month && r.date.day == day.day,
        orElse: () => EmotionRecord(date: DateTime(2000), emotion: '', diary: ''),
      );
    });
    // Í∞ÄÏû• ÎßéÏù¥ Í∏∞Î°ùÎêú Í∞êÏ†ï
    String? topEmotion;
    int maxCount = 0;
    emotionCounts.forEach((k, v) {
      if (v > maxCount) {
        topEmotion = k;
        maxCount = v;
      }
    });
    // AI ÌöåÍ≥† ÏΩîÎ©òÌä∏ ÏòàÏãú(Ïã§Ï†ú AI Ïó∞Îèô Ï†ÑÍπåÏßÄ)
    String aiComment = '';
    if (topEmotion != null) {
      switch (topEmotion) {
        case 'happy':
          aiComment = 'Ïù¥Î≤à Îã¨ÏùÄ Í∏çÏ†ïÏ†ÅÏù∏ Í∞êÏ†ïÏù¥ ÎßéÏïòÏñ¥Ïöî! ÌñâÎ≥µÌïú ÏàúÍ∞ÑÏùÑ Ïûò Í∏∞Î°ùÌïòÏÖ®ÎÑ§Ïöî.';
          break;
        case 'sad':
          aiComment = 'Ïù¥Î≤à Îã¨ÏùÄ Ïä¨ÌîîÏù¥ ÎßéÏïòÏñ¥Ïöî. ÌûòÎì† ÏàúÍ∞ÑÎèÑ Ïûò Í∏∞Î°ùÌï¥Ï£ºÏÖ®Ïñ¥Ïöî.';
          break;
        case 'angry':
          aiComment = 'Î∂ÑÎÖ∏Ïùò Í∞êÏ†ïÏù¥ ÎëêÎìúÎü¨Ï°åÏñ¥Ïöî. Í∞êÏ†ïÏùÑ ÏÜîÏßÅÌïòÍ≤å ÌëúÌòÑÌïú Ï†êÏù¥ Î©ãÏ†∏Ïöî!';
          break;
        case 'love':
          aiComment = 'ÏÇ¨ÎûëÏù¥ Í∞ÄÎìùÌïú Ìïú Îã¨Ïù¥ÏóàÎÑ§Ïöî! Îî∞ÎúªÌïú Í∏∞Î°ùÏù¥ ÎßéÏïÑÏöî.';
          break;
        default:
          aiComment = 'Îã§ÏñëÌïú Í∞êÏ†ïÏù¥ Í≥®Í≥†Î£® ÎÇòÌÉÄÎÇ¨Ïñ¥Ïöî. Íæ∏Ï§ÄÌïú Í∏∞Î°ùÏù¥ ÏÑ±Ïû•Ïùò Î∞ëÍ±∞Î¶ÑÏûÖÎãàÎã§!';
      }
    } else {
      aiComment = 'ÏïÑÏßÅ Ïù¥Î≤à Îã¨ Í∞êÏ†ï Í∏∞Î°ùÏù¥ ÏóÜÏñ¥Ïöî. Ïò§ÎäòÎ∂ÄÌÑ∞ Í∞êÏ†ïÏùÑ Í∏∞Î°ùÌï¥Î≥¥ÏÑ∏Ïöî!';
    }

    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              Color(0xFFFFE5F1), // Ïó∞Ìïú ÌïëÌÅ¨
              Color(0xFFF0F8FF), // Ïó∞Ìïú ÌïòÎäòÏÉâ
              Color(0xFFE8F5E8), // Ïó∞Ìïú ÎØºÌä∏
              Color(0xFFFFF8E1), // Ïó∞Ìïú ÎÖ∏Îûë
            ],
            stops: [0.0, 0.3, 0.7, 1.0],
          ),
        ),
        child: SafeArea(
          child: LayoutBuilder(
            builder: (context, constraints) {
              final isWide = constraints.maxWidth > 600;
              return SingleChildScrollView(
                child: Padding(
                  padding: EdgeInsets.symmetric(
                    horizontal: isWide ? 80 : 16,
                    vertical: 8,
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      _buildCustomAppBar(monthNames[month]),
                      const SizedBox(height: 20),
                      _buildMonthlyHeader(monthNames[month]),
                      const SizedBox(height: 20),
                      _buildAIReflectionCard(aiComment),
                      const SizedBox(height: 20),
                      _buildEmotionSummaryCard(emotionCounts, monthRecords.length),
                      const SizedBox(height: 20),
                      _buildRecentEmotionChart(recent7),
                      const SizedBox(height: 20),
                      _buildGrowthInsights(),
                      const SizedBox(height: 20),
                      _buildPersonalizedTips(),
                      const SizedBox(height: 20),
                      _buildNextMonthGoals(),
                      const SizedBox(height: 30),
                    ],
                  ),
                ),
              );
            },
          ),
        ),
      ),
    );
  }
}