import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import '../widgets/common_app_bar.dart';
import 'package:provider/provider.dart';
import '../models/emotion_record.dart';
import '../providers/emotion_provider.dart';
import '../providers/subscription_provider.dart';
import '../utils/theme.dart';
import '../widgets/rabbit_emoticon.dart';

class ResultScreen extends StatefulWidget {
  final String emotion;
  final String diary;
  final DateTime date;
  final List<Map<String, String>>? chatMessages; // ÏÉÅÎã¥ Î©îÏãúÏßÄ Ï∂îÍ∞Ä
  final Map<String, dynamic>? analysisData; // Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
  
  const ResultScreen({
    Key? key, 
    required this.emotion, 
    required this.diary, 
    required this.date,
    this.chatMessages,
    this.analysisData,
  }) : super(key: key);

  @override
  State<ResultScreen> createState() => _ResultScreenState();
}

class _ResultScreenState extends State<ResultScreen>
    with TickerProviderStateMixin {
  late AnimationController _fadeController;
  late AnimationController _scaleController;
  late AnimationController _slideController;
  late Animation<double> _fadeAnimation;
  late Animation<double> _scaleAnimation;
  late Animation<Offset> _slideAnimation;

  @override
  void initState() {
    super.initState();

    _fadeController = AnimationController(
      duration: Duration(milliseconds: 800),
      vsync: this,
    );

    _scaleController = AnimationController(
      duration: Duration(milliseconds: 600),
      vsync: this,
    );

    _slideController = AnimationController(
      duration: Duration(milliseconds: 1000),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _fadeController,
      curve: Curves.easeOut,
    ));

    _scaleAnimation = Tween<double>(
      begin: 0.8,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _scaleController,
      curve: Curves.elasticOut,
    ));

    _slideAnimation = Tween<Offset>(
      begin: Offset(0, 0.3),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));

    // Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÏûë
    _fadeController.forward();
    _scaleController.forward();
    _slideController.forward();
  }

  @override
  void dispose() {
    _fadeController.dispose();
    _scaleController.dispose();
    _slideController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // ÏÉÅÎã¥ Í≤∞Í≥º Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    final counselingResult = _generateCounselingResult();
    final isDark = Theme.of(context).brightness == Brightness.dark;

    return Scaffold(
      appBar: CommonAppBar(title: 'AI ÏÉÅÎã¥ Í≤∞Í≥º', emoji: 'ü§ñ'),
      body: Container(
        width: double.infinity,
        height: double.infinity,
        decoration: LifewispGradients.onboardingBgFor('emotion', dark: isDark).asBoxDecoration,
        child: SafeArea(
          child: SingleChildScrollView(
            physics: BouncingScrollPhysics(),
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 20),
              child: Column(
                children: [
                  const SizedBox(height: 20),

                  // Î©îÏù∏ Í∞êÏ†ï Ïπ¥Îìú
                  FadeTransition(
                    opacity: _fadeAnimation,
                    child: ScaleTransition(
                      scale: _scaleAnimation,
                      child: _buildMainEmotionCard(counselingResult),
                    ),
                  ),

                  SizedBox(height: 24),

                  // ÏÉÅÎã¥ ÏöîÏïΩ
                  SlideTransition(
                    position: _slideAnimation,
                    child: _buildCounselingSummary(counselingResult),
                  ),

                  SizedBox(height: 24),

                  // Í∞êÏ†ï Î∂ÑÏÑù
                  SlideTransition(
                    position: _slideAnimation,
                    child: _buildEmotionAnalysis(counselingResult),
                  ),

                  SizedBox(height: 24),

                  // Í∞úÏÑ† Î∞©Ïïà
                  SlideTransition(
                    position: _slideAnimation,
                    child: _buildImprovementSuggestions(counselingResult),
                  ),

                  SizedBox(height: 24),

                  // Îã§Ïùå Îã®Í≥Ñ
                  SlideTransition(
                    position: _slideAnimation,
                    child: _buildNextSteps(context),
                  ),

                  SizedBox(height: 40),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildMainEmotionCard(Map<String, dynamic> counselingResult) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final emotion = counselingResult['primaryEmotion'];
    final emotionName = counselingResult['emotionName'];
    final confidence = counselingResult['confidence'];

    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(24),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            isDark ? LifewispColors.darkCardBg.withOpacity(0.9) : Colors.white.withOpacity(0.9),
            isDark ? LifewispColors.darkCardBg.withOpacity(0.7) : Colors.white.withOpacity(0.7),
          ],
        ),
        borderRadius: BorderRadius.circular(24),
        boxShadow: [
          BoxShadow(
            color: isDark ? Colors.black.withOpacity(0.3) : Colors.black.withOpacity(0.1),
            blurRadius: 20,
            offset: Offset(0, 10),
          ),
        ],
        border: Border.all(
          color: isDark ? LifewispColors.darkPrimary.withOpacity(0.3) : LifewispColors.accent.withOpacity(0.3),
          width: 2,
        ),
      ),
      child: Stack(
        children: [
          // Î∞∞Í≤Ω Ïû•Ïãù
          Positioned(
            top: 20,
            right: 25,
            child: Text('‚ú®', style: TextStyle(fontSize: 20)),
          ),

          Column(
            children: [
              // Í∞êÏ†ï ÌÜ†ÎÅº Ïù¥Î™®Ìã∞ÏΩò - Î∞∞Í≤Ω Ï†úÍ±∞
              Container(
                padding: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  gradient: LinearGradient(
                    colors: isDark
                        ? [LifewispColors.darkPrimary.withOpacity(0.1), LifewispColors.darkPrimary.withOpacity(0.05)]
                        : [LifewispColors.accent.withOpacity(0.1), LifewispColors.accent.withOpacity(0.05)],
                  ),
                  border: Border.all(
                    color: isDark ? LifewispColors.darkPrimary : LifewispColors.accent,
                    width: 2,
                  ),
                ),
                child: RabbitEmoticon(
                  emotion: _convertEmotionToRabbit(emotion),
                  size: 90,
                ),
              ),

              SizedBox(height: 16),

              // Í∞êÏ†ï Ïù¥Î¶Ñ
              Text(
                emotionName,
                style: GoogleFonts.jua(
                  fontSize: 24,
                  fontWeight: FontWeight.w700,
                  color: isDark ? LifewispColors.darkMainText : LifewispColors.mainText,
                ),
                textAlign: TextAlign.center,
              ),

              SizedBox(height: 8),

              // Ïã†Î¢∞ÎèÑ
              Container(
                padding: EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                decoration: BoxDecoration(
                  color: (isDark ? LifewispColors.darkPrimary : LifewispColors.accent).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: isDark ? LifewispColors.darkPrimary : LifewispColors.accent,
                    width: 1,
                  ),
                ),
                child: Text(
                  'Î∂ÑÏÑù Ïã†Î¢∞ÎèÑ: ${(confidence * 100).toInt()}%',
                  style: LifewispTextStyles.getStaticFont(
                    context,
                    fontSize: 12,
                    fontWeight: FontWeight.w600,
                    color: isDark ? LifewispColors.darkPrimary : LifewispColors.accent,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  // Í∞êÏ†ï Ïù¥Î™®ÏßÄÎ•º ÌÜ†ÎÅº Í∞êÏ†ïÏúºÎ°ú Î≥ÄÌôò
  RabbitEmotion _convertEmotionToRabbit(String emotion) {
    switch (emotion) {
      case 'üòî':
        return RabbitEmotion.sad;
      case 'üòä':
        return RabbitEmotion.happy;
      case 'üò∞':
        return RabbitEmotion.anxious;
      case 'üò†':
        return RabbitEmotion.angry;
      case 'üò¥':
        return RabbitEmotion.tired;
      case 'üòç':
        return RabbitEmotion.love;
      case 'üò§':
        return RabbitEmotion.confidence;
      case 'üòå':
        return RabbitEmotion.calm;
      case 'ü§©':
        return RabbitEmotion.excited;
      case 'üòû':
        return RabbitEmotion.despair;
      default:
        return RabbitEmotion.calm; // Í∏∞Î≥∏Í∞í
    }
  }

  Widget _buildCounselingSummary(Map<String, dynamic> counselingResult) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final summary = counselingResult['summary'];
    final keywords = List<String>.from(counselingResult['keywords'] ?? []); // ÌÉÄÏûÖ ÏïàÏ†ÑÏÑ± ÌôïÎ≥¥

    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            isDark ? LifewispColors.darkCardBg.withOpacity(0.9) : Colors.white.withOpacity(0.9),
            isDark ? LifewispColors.darkCardBg.withOpacity(0.7) : Colors.white.withOpacity(0.7),
          ],
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: isDark ? Colors.black.withOpacity(0.2) : Colors.black.withOpacity(0.1),
            blurRadius: 15,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: (isDark ? LifewispColors.darkPrimary : LifewispColors.accent).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(
                  Icons.psychology,
                  color: isDark ? LifewispColors.darkPrimary : LifewispColors.accent,
                  size: 20,
                ),
              ),
              SizedBox(width: 12),
              Text(
                'AI ÏÉÅÎã¥ ÏöîÏïΩ',
                style: LifewispTextStyles.getStaticFont(
                  context,
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                  color: isDark ? LifewispColors.darkMainText : LifewispColors.mainText,
                ),
              ),
            ],
          ),
          SizedBox(height: 16),
          Text(
            summary,
            style: LifewispTextStyles.getStaticFont(
              context,
              fontSize: 16,
              color: isDark ? LifewispColors.darkSubText : LifewispColors.subText,
              height: 1.6,
            ),
          ),
          SizedBox(height: 16),
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: keywords.map<Widget>((keyword) => Container(
              padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    LifewispColors.pink.withOpacity(0.1),
                    LifewispColors.purple.withOpacity(0.1),
                  ],
                ),
                borderRadius: BorderRadius.circular(16),
                border: Border.all(
                  color: LifewispColors.pink.withOpacity(0.3),
                  width: 1,
                ),
              ),
              child: Text(
                keyword,
                style: LifewispTextStyles.getStaticFont(
                  context,
                  fontSize: 12,
                  fontWeight: FontWeight.w600,
                  color: isDark ? LifewispColors.darkPink : LifewispColors.pink,
                ),
              ),
            )).toList(),
          ),
        ],
      ),
    );
  }

  Widget _buildEmotionAnalysis(Map<String, dynamic> counselingResult) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final insights = List<String>.from(counselingResult['insights'] ?? []); // ÌÉÄÏûÖ ÏïàÏ†ÑÏÑ± ÌôïÎ≥¥

    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            isDark ? LifewispColors.darkCardBg.withOpacity(0.9) : Colors.white.withOpacity(0.9),
            isDark ? LifewispColors.darkCardBg.withOpacity(0.7) : Colors.white.withOpacity(0.7),
          ],
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: isDark ? Colors.black.withOpacity(0.2) : Colors.black.withOpacity(0.1),
            blurRadius: 15,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: (isDark ? LifewispColors.darkPrimary : LifewispColors.accent).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(
                  Icons.analytics,
                  color: isDark ? LifewispColors.darkPrimary : LifewispColors.accent,
                  size: 20,
                ),
              ),
              SizedBox(width: 12),
              Text(
                'Í∞êÏ†ï Î∂ÑÏÑù Ïù∏ÏÇ¨Ïù¥Ìä∏',
                style: GoogleFonts.jua(
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                  color: isDark ? LifewispColors.darkMainText : LifewispColors.mainText,
                ),
              ),
            ],
          ),
          SizedBox(height: 16),
          ...insights.map<Widget>((insight) => Padding(
            padding: EdgeInsets.only(bottom: 12),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  width: 8,
                  height: 8,
                  margin: EdgeInsets.only(top: 8, right: 12),
                  decoration: BoxDecoration(
                    color: isDark ? LifewispColors.darkPrimary : LifewispColors.accent,
                    borderRadius: BorderRadius.circular(4),
                  ),
                ),
                Expanded(
                  child: Text(
                    insight,
                    style: LifewispTextStyles.getStaticFont(
                      context,
                      fontSize: 14,
                      color: isDark ? LifewispColors.darkSubText : LifewispColors.subText,
                      height: 1.5,
                    ),
                  ),
                ),
              ],
            ),
          )).toList(),
        ],
      ),
    );
  }

  Widget _buildImprovementSuggestions(Map<String, dynamic> counselingResult) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final suggestions = List<String>.from(counselingResult['suggestions'] ?? []); // ÌÉÄÏûÖ ÏïàÏ†ÑÏÑ± ÌôïÎ≥¥

    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            isDark ? LifewispColors.darkCardBg.withOpacity(0.9) : Colors.white.withOpacity(0.9),
            isDark ? LifewispColors.darkCardBg.withOpacity(0.7) : Colors.white.withOpacity(0.7),
          ],
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: isDark ? Colors.black.withOpacity(0.2) : Colors.black.withOpacity(0.1),
            blurRadius: 15,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: (isDark ? LifewispColors.darkPrimary : LifewispColors.accent).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(
                  Icons.lightbulb,
                  color: isDark ? LifewispColors.darkPrimary : LifewispColors.accent,
                  size: 20,
                ),
              ),
              SizedBox(width: 12),
              Text(
                'Í∞úÏÑ† Î∞©Ïïà',
                style: GoogleFonts.jua(
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                  color: isDark ? LifewispColors.darkMainText : LifewispColors.mainText,
                ),
              ),
            ],
          ),
          SizedBox(height: 16),
          ...suggestions.map<Widget>((suggestion) => Padding(
            padding: EdgeInsets.only(bottom: 12),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Icon(
                  Icons.check_circle,
                  color: Colors.green,
                  size: 20,
                ),
                SizedBox(width: 12),
                Expanded(
                  child: Text(
                    suggestion,
                    style: GoogleFonts.jua(
                      fontSize: 14,
                      color: isDark ? LifewispColors.darkSubText : LifewispColors.subText,
                      height: 1.5,
                    ),
                  ),
                ),
              ],
            ),
          )).toList(),
        ],
      ),
    );
  }

  Widget _buildNextSteps(BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final subscription = context.watch<SubscriptionProvider>();

    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            isDark ? LifewispColors.darkCardBg.withOpacity(0.9) : Colors.white.withOpacity(0.9),
            isDark ? LifewispColors.darkCardBg.withOpacity(0.7) : Colors.white.withOpacity(0.7),
          ],
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: isDark ? Colors.black.withOpacity(0.2) : Colors.black.withOpacity(0.1),
            blurRadius: 15,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: (isDark ? LifewispColors.darkPrimary : LifewispColors.accent).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(
                  Icons.trending_up,
                  color: isDark ? LifewispColors.darkPrimary : LifewispColors.accent,
                  size: 20,
                ),
              ),
              SizedBox(width: 12),
              Text(
                'Îã§Ïùå Îã®Í≥Ñ',
                style: LifewispTextStyles.getStaticFont(
                  context,
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                  color: isDark ? LifewispColors.darkMainText : LifewispColors.mainText,
                ),
              ),
            ],
          ),
          SizedBox(height: 16),
          if (subscription.isPremium) ...[
            _buildNextStepItem(
              context,
              'üìä AI Í≥†Í∏â Î∂ÑÏÑù',
              'Îçî ÍπäÏùÄ Í∞êÏ†ï Ìå®ÌÑ¥ Î∂ÑÏÑùÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî',
              () => Navigator.pushNamed(context, '/advanced_analysis'),
            ),
            _buildNextStepItem(
              context,
              'üìù Í∞êÏ†ï Í∏∞Î°ù',
              'Ïò§ÎäòÏùò Í∞êÏ†ïÏùÑ Í∏∞Î°ùÌï¥Î≥¥ÏÑ∏Ïöî',
              () => Navigator.pushNamed(context, '/emotion_record'),
            ),
            _buildNextStepItem(
              context,
              'üìà ÏõîÍ∞Ñ Î¶¨Ìè¨Ìä∏',
              'ÏõîÍ∞Ñ Í∞êÏ†ï Î≥ÄÌôî Î¶¨Ìè¨Ìä∏Î•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî',
              () {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Í≥ß Ï∂úÏãúÎê† Í∏∞Îä•ÏûÖÎãàÎã§! üöÄ')),
                );
              },
            ),
          ] else ...[
            _buildNextStepItem(
              context,
              'üìù Í∞êÏ†ï Í∏∞Î°ù',
              'Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú Í∞êÏ†ïÏùÑ Í∏∞Î°ùÌï¥Î≥¥ÏÑ∏Ïöî',
              () => Navigator.pushNamed(context, '/emotion_record'),
            ),
            _buildNextStepItem(
              context,
              'ü§ñ AI ÏÉÅÎã¥ÏÇ¨',
              'Îçî ÎßéÏùÄ ÏÉÅÎã¥ÏùÑ ÏúÑÌï¥ ÌîÑÎ¶¨ÎØ∏ÏóÑÏùÑ Í≥†Î†§Ìï¥Î≥¥ÏÑ∏Ïöî',
              () => Navigator.pushNamed(context, '/subscription'),
            ),
            _buildNextStepItem(
              context,
              'üìä Í∏∞Î≥∏ Î∂ÑÏÑù',
              'ÌòÑÏû¨ Í∞êÏ†ï ÌÜµÍ≥ÑÎ•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî',
              () => Navigator.pushNamed(context, '/analysis'),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildNextStepItem(
    BuildContext context,
    String title,
    String description,
    VoidCallback onTap,
  ) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    
    return GestureDetector(
      onTap: onTap,
      child: Container(
        margin: EdgeInsets.only(bottom: 12),
        padding: EdgeInsets.all(16),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              isDark ? LifewispColors.darkCardBg.withOpacity(0.9) : Colors.white.withOpacity(0.9),
              isDark ? LifewispColors.darkCardBg.withOpacity(0.7) : Colors.white.withOpacity(0.7),
            ],
          ),
          borderRadius: BorderRadius.circular(16),
          border: Border.all(
            color: (isDark ? LifewispColors.darkPrimary : LifewispColors.accent).withOpacity(0.3),
            width: 1,
          ),
          boxShadow: [
            BoxShadow(
              color: isDark ? Colors.black.withOpacity(0.1) : Colors.black.withOpacity(0.05),
              blurRadius: 10,
              offset: Offset(0, 2),
            ),
          ],
        ),
        child: Row(
          children: [
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: LifewispTextStyles.getStaticFont(
                      context,
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                      color: isDark ? LifewispColors.darkMainText : LifewispColors.mainText,
                    ),
                  ),
                  SizedBox(height: 4),
                  Text(
                    description,
                    style: LifewispTextStyles.getStaticFont(
                      context,
                      fontSize: 14,
                      color: isDark ? LifewispColors.darkSubText : LifewispColors.subText,
                    ),
                  ),
                ],
              ),
            ),
            Icon(
              Icons.arrow_forward_ios,
              color: isDark ? LifewispColors.darkSubText : LifewispColors.subText,
              size: 16,
            ),
          ],
        ),
      ),
    );
  }

  Map<String, dynamic> _generateCounselingResult() {
    // ÏÉÅÎã¥ Î©îÏãúÏßÄÏóêÏÑú Í∞êÏ†ï Î∂ÑÏÑù
    final emotion = widget.emotion;
    final diary = widget.diary;

    // Í∞êÏ†ïÎ≥Ñ Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞
    final emotionData = <String, Map<String, dynamic>>{
      'üòî': {
        'name': 'Ïä¨Ìîî/Ïö∞Ïö∏',
        'confidence': 0.85,
        'summary': 'ÌòÑÏû¨ Ïä¨ÌîîÏù¥ÎÇò Ïö∞Ïö∏Ìïú Í∞êÏ†ïÏùÑ Í≤ΩÌóòÌïòÍ≥† Í≥ÑÏãúÎäî Í≤É Í∞ôÏäµÎãàÎã§. Ïù¥Îü∞ Í∞êÏ†ïÏùÄ ÏûêÏó∞Ïä§Îü¨Ïö¥ Î∞òÏùëÏù¥Î©∞, Ï∂©Î∂ÑÌûà Ïù¥Ìï¥Î∞õÏùÑ Í∞ÄÏπòÍ∞Ä ÏûàÏäµÎãàÎã§.',
        'keywords': ['#ÏúÑÎ°ú', '#ÏûêÍ∏∞ÎèåÎ¥Ñ', '#Í∞êÏ†ïÏù∏Ï†ï'],
        'insights': [
          'Ïä¨ÌîîÏùÄ ÏûêÏó∞Ïä§Îü¨Ïö¥ Í∞êÏ†ï Î∞òÏùëÏûÖÎãàÎã§',
          'ÏûêÏã†Ïùò Í∞êÏ†ïÏùÑ Ïù∏Ï†ïÌïòÎäî Í≤ÉÏù¥ Ï§ëÏöîÌï©ÎãàÎã§',
          'ÏûëÏùÄ Í≤ÉÎ∂ÄÌÑ∞ ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî',
        ],
        'suggestions': [
          'Îî∞ÎúªÌïú Ï∞® Ìïú ÏûîÍ≥º Ìï®Íªò ÎßàÏùåÏùò ÌèâÌôîÎ•º Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî',
          'Ï¢ãÏïÑÌïòÎäî ÏùåÏïÖÏùÑ Îì§Ïñ¥Î≥¥ÏÑ∏Ïöî',
          'ÏûêÏó∞ ÏÜçÏóêÏÑú ÏãúÍ∞ÑÏùÑ Î≥¥ÎÇ¥Î≥¥ÏÑ∏Ïöî',
        ],
      },
      'üòä': {
        'name': 'ÌñâÎ≥µ/Í∏∞ÏÅ®',
        'confidence': 0.90,
        'summary': 'Í∏çÏ†ïÏ†ÅÏù∏ Í∞êÏ†ïÏùÑ Í≤ΩÌóòÌïòÍ≥† Í≥ÑÏãúÎäîÍµ∞Ïöî! Ïù¥Îü∞ ÏàúÍ∞ÑÎì§ÏùÑ ÏÜåÏ§ëÌûà Ïó¨Í∏∞Í≥† Í∏∞ÏñµÌï¥ÎëêÏÑ∏Ïöî.',
        'keywords': ['#Í∞êÏÇ¨', '#Í∏çÏ†ï', '#Í∏∞ÏÅ®'],
        'insights': [
          'Í∏çÏ†ïÏ†ÅÏù∏ Í∞êÏ†ïÏùÄ Í±¥Í∞ïÏóê Ï¢ãÏäµÎãàÎã§',
          'Ïù¥Îü∞ ÏàúÍ∞ÑÎì§ÏùÑ Í∏∞Î°ùÌï¥ÎëêÏÑ∏Ïöî',
          'Ï£ºÎ≥Ä ÏÇ¨ÎûåÎì§Í≥º ÎÇòÎàÑÏñ¥Î≥¥ÏÑ∏Ïöî',
        ],
        'suggestions': [
          'Í∞êÏÇ¨ ÏùºÍ∏∞Î•º Ïç®Î≥¥ÏÑ∏Ïöî',
          'Ï¢ãÏùÄ ÏóêÎÑàÏßÄÎ•º Ï£ºÎ≥ÄÍ≥º ÎÇòÎàÑÏñ¥Î≥¥ÏÑ∏Ïöî',
          'Ïù¥ ÏàúÍ∞ÑÏùÑ ÏÇ¨ÏßÑÏúºÎ°ú ÎÇ®Í≤®Î≥¥ÏÑ∏Ïöî',
        ],
      },
      'üò∞': {
        'name': 'Î∂àÏïà/Í±±Ï†ï',
        'confidence': 0.88,
        'summary': 'Î∂àÏïàÌïú ÎßàÏùåÏù¥ ÎìúÏãúÎäîÍµ∞Ïöî. Î∂àÏïàÏùÄ ÎØ∏ÎûòÏóê ÎåÄÌïú Ïö∞Î†§ÏóêÏÑú ÎÇòÏò§Îäî Í≤ΩÏö∞Í∞Ä ÎßéÏäµÎãàÎã§.',
        'keywords': ['#Ìò∏Ìù°', '#ÎßàÏùåÏ±ôÍπÄ', '#ÌòÑÏû¨ÏßëÏ§ë'],
        'insights': [
          'Î∂àÏïàÏùÄ ÎØ∏ÎûòÏóê ÎåÄÌïú Í±±Ï†ïÏûÖÎãàÎã§',
          'ÌòÑÏû¨Ïóê ÏßëÏ§ëÌïòÎäî Í≤ÉÏù¥ ÎèÑÏõÄÏù¥ Îê©ÎãàÎã§',
          'ÍπäÏùÄ Ìò∏Ìù°Ïù¥ Í∏¥Ïû•ÏùÑ ÌíÄÏñ¥Ï§çÎãàÎã§',
        ],
        'suggestions': [
          '4-7-8 Ìò∏Ìù°Î≤ïÏùÑ ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî',
          'ÏßÄÍ∏à Ìï† Ïàò ÏûàÎäî Í≤ÉÏóê ÏßëÏ§ëÌï¥Î≥¥ÏÑ∏Ïöî',
          'ÎßàÏùåÏ±ôÍπÄ Î™ÖÏÉÅÏùÑ Ìï¥Î≥¥ÏÑ∏Ïöî',
        ],
      },
      'üò†': {
        'name': 'Î∂ÑÎÖ∏/ÌôîÎÇ®',
        'confidence': 0.82,
        'summary': 'ÌôîÍ∞Ä ÎÇòÏãúÎäîÍµ∞Ïöî. Î∂ÑÎÖ∏Îäî ÏûêÏó∞Ïä§Îü¨Ïö¥ Í∞êÏ†ïÏù¥ÏßÄÎßå, Í±¥Í∞ïÌïòÍ≤å ÌëúÌòÑÌïòÎäî Í≤ÉÏù¥ Ï§ëÏöîÌï©ÎãàÎã§.',
        'keywords': ['#Í∞êÏ†ïÏ°∞Ï†à', '#Ìò∏Ìù°', '#ÏãúÍ∞Ñ'],
        'insights': [
          'Î∂ÑÎÖ∏Îäî ÏûêÏó∞Ïä§Îü¨Ïö¥ Í∞êÏ†ïÏûÖÎãàÎã§',
          'Ïû†Ïãú Î©àÏ∂îÍ≥† ÏÉùÍ∞ÅÌï¥Î≥¥ÏÑ∏Ïöî',
          'Í±¥Í∞ïÌïú Î∞©Î≤ïÏúºÎ°ú ÌëúÌòÑÌï¥Î≥¥ÏÑ∏Ïöî',
        ],
        'suggestions': [
          '10ÍπåÏßÄ ÏÑ∏Ïñ¥Î≥¥ÏÑ∏Ïöî',
          'ÌôîÍ∞Ä ÎÇú Ïù¥Ïú†Î•º Ï†ÅÏñ¥Î≥¥ÏÑ∏Ïöî',
          'Ïû†Ïãú Îã§Î•∏ ÏùºÏùÑ Ìï¥Î≥¥ÏÑ∏Ïöî',
        ],
      },
      'üò¥': {
        'name': 'ÌîºÍ≥§/ÏßÄÏπ®',
        'confidence': 0.85,
        'summary': 'ÌîºÍ≥§ÌïòÏãúÍµ∞Ïöî. Ï∂©Î∂ÑÌïú Ìú¥ÏãùÏù¥ ÌïÑÏöîÌï¥ Î≥¥ÏûÖÎãàÎã§. Î™∏Í≥º ÎßàÏùåÏù¥ Ïâ¨Í≥† Ïã∂Ïñ¥ÌïòÍ≥† ÏûàÏñ¥Ïöî.',
        'keywords': ['#Ìú¥Ïãù', '#ÏàòÎ©¥', '#ÏûêÍ∏∞ÎèåÎ¥Ñ'],
        'insights': [
          'ÌîºÍ≥§Ìï®ÏùÄ Ìú¥ÏãùÏù¥ ÌïÑÏöîÌïòÎã§Îäî Ïã†Ìò∏ÏûÖÎãàÎã§',
          'Ï∂©Î∂ÑÌïú ÏàòÎ©¥Ïù¥ Ï§ëÏöîÌï©ÎãàÎã§',
          'ÏûêÍ∏∞ ÎèåÎ¥ÑÏù¥ ÌïÑÏöîÌï©ÎãàÎã§',
        ],
        'suggestions': [
          'Ï∂©Î∂ÑÌïú ÏàòÎ©¥ÏùÑ Ï∑®Ìï¥Î≥¥ÏÑ∏Ïöî',
          'Îî∞ÎúªÌïú Ï∞® Ìïú ÏûîÏùÑ ÎßàÏÖîÎ≥¥ÏÑ∏Ïöî',
          'Ï¢ãÏïÑÌïòÎäî ÏùåÏïÖÏùÑ Îì§Ïñ¥Î≥¥ÏÑ∏Ïöî',
        ],
      },
    };

    final defaultData = <String, dynamic>{
      'name': 'Î≥µÌï© Í∞êÏ†ï',
      'confidence': 0.75,
      'summary': 'Îã§ÏñëÌïú Í∞êÏ†ïÏùÑ Í≤ΩÌóòÌïòÍ≥† Í≥ÑÏãúÎäîÍµ∞Ïöî. Ïù¥Îü∞ Í∞êÏ†ïÎì§Ïù¥ Î™®Îëê ÏÜåÏ§ëÌïòÍ≥† ÏùòÎØ∏Í∞Ä ÏûàÏäµÎãàÎã§.',
      'keywords': ['#Í∞êÏ†ïÏù∏Ï†ï', '#ÏûêÍ∏∞Ïù¥Ìï¥', '#ÏÑ±Ïû•'],
      'insights': [
        'Î™®Îì† Í∞êÏ†ïÏùÄ ÏùòÎØ∏Í∞Ä ÏûàÏäµÎãàÎã§',
        'Í∞êÏ†ïÏùÑ ÌëúÌòÑÌïòÎäî Í≤ÉÏù¥ Ï§ëÏöîÌï©ÎãàÎã§',
        'ÏûêÏã†ÏùÑ Ïù¥Ìï¥ÌïòÎäî ÏãúÍ∞ÑÏù¥ ÌïÑÏöîÌï©ÎãàÎã§',
      ],
      'suggestions': [
        'Í∞êÏ†ï ÏùºÍ∏∞Î•º Ïç®Î≥¥ÏÑ∏Ïöî',
        'ÏûêÏã†ÏóêÍ≤å ÏπúÏ†àÌï¥ÏßÄÏÑ∏Ïöî',
        'Ï†ÑÎ¨∏Í∞ÄÏôÄ ÏÉÅÎã¥ÏùÑ Í≥†Î†§Ìï¥Î≥¥ÏÑ∏Ïöî',
      ],
    };

    final data = emotionData[emotion] ?? defaultData;

    return <String, dynamic>{
      'primaryEmotion': emotion,
      'emotionName': data['name'],
      'confidence': data['confidence'],
      'summary': data['summary'],
      'keywords': data['keywords'],
      'insights': data['insights'],
      'suggestions': data['suggestions'],
    };
  }
}